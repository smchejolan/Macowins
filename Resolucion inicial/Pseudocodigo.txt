#Pseudocodigo

clase Prenda{
    #Atributos 
    publico TipoDePrenda Tipo
    publico real PrecioBase 
    publico Estado EstadoDePrenda  

    #Metodos
    publico real Precio() = EstadoDePrenda.CalcularPrecio(PrecioBase);
}

interfaz Estado{
    publico CalcularPrecio(real PrecioBase)
}

clase Nuevo implementa Estado{
    publico CalcularPrecio(real PrecioBase) = PrecioBase
}

clase Liquidacion implementa Estado{
    publico CalcularPrecio(real PrecioBase) = PrecioBase * 0.5
}

clase Promocion implementa Estado{
    publico real descuento

    cosntructor Promocion(descuento){ this.descuento = descuento}

    publico CalcularPrecio(real PrecioBase) = PrecioBase - descuento
}

enum TipoDePrenda {Saco, Pantalon, Camisa}

enum Constantes {CoefRecargo{ publico real valor() = 0.1 }}

clase venta{
    publico lista<Tupla<Prenda, real>> prendas    // Sobre la cantidad, no me queda claro si es la cantidad de cada prenda o el total de prendas
    publico datetime Fecha
    publico Metodo metodoDePago
  
    publico real PrecioFinal() {
        return prendas.stream().mapearADouble(p => p.get0().precio() * p.get1()).sumar() + metodoDePago.AplicarRecargo(prendas)        
    }
}

interfaz metodoDePago{
    publico real AplicarRecargo(Lista<Tupla<Prenda,real>>)
}

clae efectivo implementa metodoDePago{
    publico real AplicarRecargo(Lista<Tupla<Prenda,real>> prendas){
        return 0
    }
}

interfaz tarjeta implementa metodoDePago{
    publico real coutas

    cosntructor tarjeta(coutas){ this.coutas = coutas}

    publico real AplicarRecargo(Lista<Tupla<Prenda,int>> prendas){
        real precioRecargoInicial = prendas.stream().mapearADouble(p => p.get0().precio() * 0.01 * p.get1()).sumar()
        
        return coutas * Constantes.CoefRecargo.valor() + precioConRecargoInicial
    }
}